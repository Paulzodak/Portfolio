{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport darkModeIcon from \"../../images/dark.png\";\nimport lightModeIcon from \"../../images/light.png\";\nexport const modeSlice = createSlice({\n  name: \"mode\",\n  initialState: {\n    lightMode: {\n      id: 0,\n      src: lightModeIcon,\n      active: true,\n      color: \"white\",\n      bs: \"0.1px 0.1px 15px rgb(210, 210, 210)\",\n      bd: \"none\",\n      Iconbd: \"1px solid black\"\n    },\n    darkMode: {\n      id: 1,\n      src: darkModeIcon,\n      active: false,\n      color: \"black\",\n      bs: \"none\",\n      bd: \"2px solid gray\",\n      Iconbd: \"1px solid white\"\n    }\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = modeSlice.actions;\nexport default modeSlice.reducer;","map":{"version":3,"names":["createSlice","darkModeIcon","lightModeIcon","modeSlice","name","initialState","lightMode","id","src","active","color","bs","bd","Iconbd","darkMode","reducers","increment","state","value","decrement","incrementByAmount","action","payload","actions","reducer"],"sources":["/Users/ojepauloluwaferanmi/Documents/DEVELOPMENT/Portfolio/src/components/redux/mode.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nimport darkModeIcon from \"../../images/dark.png\";\nimport lightModeIcon from \"../../images/light.png\";\n\nexport const modeSlice = createSlice({\n  name: \"mode\",\n  initialState: {\n    lightMode: {\n      id: 0,\n      src: lightModeIcon,\n      active: true,\n      color: \"white\",\n      bs: \"0.1px 0.1px 15px rgb(210, 210, 210)\",\n      bd: \"none\",\n      Iconbd: \"1px solid black\",\n    },\n    darkMode: {\n      id: 1,\n      src: darkModeIcon,\n      active: false,\n      color: \"black\",\n      bs: \"none\",\n      bd: \"2px solid gray\",\n      Iconbd: \"1px solid white\",\n    },\n  },\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = modeSlice.actions;\n\nexport default modeSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AAEA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,MAD6B;EAEnCC,YAAY,EAAE;IACZC,SAAS,EAAE;MACTC,EAAE,EAAE,CADK;MAETC,GAAG,EAAEN,aAFI;MAGTO,MAAM,EAAE,IAHC;MAITC,KAAK,EAAE,OAJE;MAKTC,EAAE,EAAE,qCALK;MAMTC,EAAE,EAAE,MANK;MAOTC,MAAM,EAAE;IAPC,CADC;IAUZC,QAAQ,EAAE;MACRP,EAAE,EAAE,CADI;MAERC,GAAG,EAAEP,YAFG;MAGRQ,MAAM,EAAE,KAHA;MAIRC,KAAK,EAAE,OAJC;MAKRC,EAAE,EAAE,MALI;MAMRC,EAAE,EAAE,gBANI;MAORC,MAAM,EAAE;IAPA;EAVE,CAFqB;EAsBnCE,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAD,IAAW;MACpB;MACA;MACA;MACA;MACAA,KAAK,CAACC,KAAN,IAAe,CAAf;IACD,CAPO;IAQRC,SAAS,EAAGF,KAAD,IAAW;MACpBA,KAAK,CAACC,KAAN,IAAe,CAAf;IACD,CAVO;IAWRE,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;MACpCJ,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;IACD;EAbO;AAtByB,CAAD,CAA7B,C,CAuCP;;AACA,OAAO,MAAM;EAAEN,SAAF;EAAaG,SAAb;EAAwBC;AAAxB,IAA8CjB,SAAS,CAACoB,OAA9D;AAEP,eAAepB,SAAS,CAACqB,OAAzB"},"metadata":{},"sourceType":"module"}